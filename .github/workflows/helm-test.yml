---
# Note:
# You can uncomment "if" statements in all steps but by leaving that comments we ensure that each time this workflow will run we will test the Helm 
# chart even if the chart itself hasn't changed. By doing this we ensure that the potentially changed source code still works along with the Helm chart.

name: Helm-Test
# TODO make this workflow universal so it will be able to work for each helm chart within the helm-charts directory
# TODO change this file if you decided to use separete namespace for main application's resources

on:
  workflow_dispatch:  # Step "Run chart-testing (list-changed)" will always return that there are no changes while workflow is executed manually
  pull_request:
    branches: [main]
    paths:
      - 'helm-charts/**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.2

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.4.0

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Run chart-testing (lint)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct lint --target-branch ${{ github.event.repository.default_branch }}

      - name: Run micro Kubernetes cluster for testing purposes
        uses: AbsaOSS/k3d-action@v2
#        if: steps.list-changed.outputs.changed == 'true'
        with:
          cluster-name: "test-cluster-1"
          args: >-
            --agents 1
            --no-lb
            --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"

      - name: Run chart-testing (install)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct install --target-branch ${{ github.event.repository.default_branch }}

      - name: Login to Docker Hub
#        if: steps.list-changed.outputs.changed == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run Helm resources
#        if: steps.list-changed.outputs.changed == 'true'
        run: |
          kubectl create secret docker-registry regcred \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }}
          helm install golden-devops-helm-release helm-charts/main-chart --values helm-charts/main-chart/values.yaml -f helm-charts/main-chart/values-prod.yaml --set disableTLS=true
          echo "Waiting to startup containers..."
          sleep 50
          kubectl get all --namespace=argocd
          echo "---------------------------Main container logs--------------------------"
          kubectl logs -l app=golden-devops-helm-release --namespace=argocd
          echo "------------------------------------------------------------------------"

      - name: Test Helm resources (curl command)
#        if: steps.list-changed.outputs.changed == 'true'
        run: |
          if ! kubectl exec deploy/golden-devops-helm-release --namespace=argocd -- curl --fail localhost:8080; then
            echo "Failed to retrieve data from localhost!"
            exit 1
          fi

      - name: Test Helm resources (wget with testing container)
#        if: steps.list-changed.outputs.changed == 'true'
        run: |
          if ! helm test golden-devops-helm-release; then
            echo "Testing of Helm golden-devops-helm-release failed!"
            echo "---------------------------Testing container logs--------------------------"
            kubectl logs golden-devops-helm-release-connection-test --namespace=argocd
            echo "---------------------------------------------------------------------------"
            exit 1
          fi
          echo "---------------------------Testing container logs--------------------------"
          kubectl logs golden-devops-helm-release-connection-test --namespace=argocd
          echo "---------------------------------------------------------------------------"

  test-Snyk:
    name: Scan Helm chart with Snyk
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Run Snyk to check Helm chart for issues
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          file: helm-charts/main-chart
          args: --severity-threshold=high

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'snyk.sarif'
