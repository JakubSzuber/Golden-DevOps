---
# Note:
# You can uncomment "if" statements in all steps but by leaving that comments we ensure that each time this workflow will run we will test the Helm 
# chart even if the chart itself hasn't changed. By doing this we ensure that the potentially changed source code still works along with the Helm chart.

name: Helm-Test
# TODO Restrict permissions
# TODO make this workflow universal so it will be able to work for each helm chart within the helm-charts directory
# TODO change this file if you decided to use separete namespace for main application's resources

on:
  workflow_dispatch:  # Step "Run chart-testing (list-changed)" will always return that there are no changes while workflow is executed manually
  pull_request:
    branches: ['main', 'dev_*', 'snyk-upgrade-*']
    paths:
      - 'helm-charts/**'
  push:
    branches: [main]
    paths:
      - 'helm-charts/**'

jobs:
  test-kubeconform-dry-run:
    if: github.event_name != 'push'
    name: Test Feasibility Of Execution The Helm Chart Using Kubeconform And "--dry-run" Flag
    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.2

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.4.0

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.pull_request.head.ref }})
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Run micro Kubernetes cluster for testing purposes
        uses: AbsaOSS/k3d-action@v2
#        if: steps.list-changed.outputs.changed == 'true'
        with:
          cluster-name: "test-cluster-1"
          args: >-
            --agents 1
            --no-lb
            --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"

      - name: Login to Docker Hub
#        if: steps.list-changed.outputs.changed == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Kubernetes tools
#        if: steps.list-changed.outputs.changed == 'true'
        uses: yokawasa/action-setup-kube-tools@v0.9.2
        with:
          kubectl: '1.27.1'
          helm: '3.12.2'
          kubeconform: '0.6.2'

      - name: Prepare environment for testing Helm chart
#        if: steps.list-changed.outputs.changed == 'true'
        run: |
          kubectl create secret docker-registry regcred \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }}
          helm plugin install https://github.com/jtyr/kubeconform-helm

      # Each step has "if: always()" in order to execute despite of result of the previous step. 
      # This gives us more comprehensive debugging in case of a fail.

      - name: Run basic Kubeconform command
        #if: steps.list-changed.outputs.changed == 'true' && always()
        if: always()
        run: |
          cd helm-charts/main-chart
          helm kubeconform -f values.yaml -f values-prod.yaml . || echo "Nothing noticed by Kubeconform..."

      - name: Run Kubeconform command with summary and verbose mode
        #if: steps.list-changed.outputs.changed == 'true' && always()
        if: always()
        run: |
          cd helm-charts/main-chart
          helm kubeconform -f values.yaml -f values-prod.yaml --verbose --summary .

      - name: Run Kubeconform command with summary and json format
        #if: steps.list-changed.outputs.changed == 'true' && always()
        if: always()
        run: |
          cd helm-charts/main-chart
          helm kubeconform -f values.yaml -f values-prod.yaml --summary --output json .

      - name: Run "helm template" command in debug mode
        #if: steps.list-changed.outputs.changed == 'true' && always()
        if: always()
        run: |
          cd helm-charts/main-chart
          helm template . --debug -f values.yaml -f values-prod.yaml

      - name: Run "helm install" command in debug mode and "--dry-run" flag
        #if: steps.list-changed.outputs.changed == 'true' && always()
        if: always()
        run: |
          cd helm-charts/main-chart
          helm install golden-devops-helm-release . --dry-run --debug -f values.yaml -f values-prod.yaml

      - name: Run "helm install" command with and "--dry-run" flag
        #if: steps.list-changed.outputs.changed == 'true' && always()
        if: always()
        run: |
          cd helm-charts/main-chart
          helm install golden-devops-helm-release . --dry-run -f values.yaml -f values-prod.yaml

  test-with-commands:
    if: github.event_name != 'push'
    name: Test Using Command-Line Tools
    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.2

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.4.0

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.pull_request.head.ref }})
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Run chart-testing (lint)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct lint --target-branch ${{ github.event.pull_request.head.ref }}

      - name: Run micro Kubernetes cluster for testing purposes
        uses: AbsaOSS/k3d-action@v2
#        if: steps.list-changed.outputs.changed == 'true'
        with:
          cluster-name: "test-cluster-1"
          args: >-
            --agents 1
            --no-lb
            --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"

      - name: Run chart-testing (install)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct install --target-branch ${{ github.event.pull_request.head.ref }}

      - name: Login to Docker Hub
#        if: steps.list-changed.outputs.changed == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run Helm resources
#        if: steps.list-changed.outputs.changed == 'true'
        run: |
          kubectl create secret docker-registry regcred \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }}
          helm install golden-devops-helm-release helm-charts/main-chart --values helm-charts/main-chart/values.yaml -f helm-charts/main-chart/values-prod.yaml --set disableTLS=true
          echo "Waiting to startup containers..."
          sleep 50
          kubectl get all --namespace=argocd
          echo "---------------------------Main container logs--------------------------"
          kubectl logs -l app=golden-devops-helm-release --namespace=argocd
          echo "------------------------------------------------------------------------"

      # TODO Later, when you move from the self-signed certificates delete "-k" flag
      - name: Test Helm resources (curl command)
#        if: steps.list-changed.outputs.changed == 'true'
        run: |
          if ! kubectl exec deploy/golden-devops-helm-release --namespace=argocd -- curl -k -f https://localhost:8080; then
            echo "Failed to retrieve data from localhost!"
            exit 1
          fi

      - name: Test Helm resources (wget with testing container)
#        if: steps.list-changed.outputs.changed == 'true'
        run: |
          if ! helm test golden-devops-helm-release; then
            echo "Testing of Helm golden-devops-helm-release failed!"
            echo "---------------------------Testing container logs--------------------------"
            kubectl logs golden-devops-helm-release-connection-test --namespace=argocd
            echo "---------------------------------------------------------------------------"
            exit 1
          fi
          echo "---------------------------Testing container logs--------------------------"
          kubectl logs golden-devops-helm-release-connection-test --namespace=argocd
          echo "---------------------------------------------------------------------------"

  test-kubescape:
    if: github.event_name != 'push'
    name: Scan Helm Chart With Kubescape
    runs-on: ubuntu-latest

    #permissions:  # TODO OOOOOOOOO temporary
    #  actions: read
    #  contents: read
    #  pull-requests: write
    #  security-events: write

    steps:
    - name: Checkout git repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Helm
      uses: azure/setup-helm@v3

    - name: Template Helm chart's files
      run: |
        cd helm-charts/main-chart
        helm dependency update
        helm template . -f values.yaml -f values-prod.yaml --output-dir ../../rendered-main-chart

    - name: Get changed files
      if: github.event_name == 'pull_request'
      id: changed-files
      uses: tj-actions/changed-files@v35

    - run: |
        echo "${{ steps.changed-files.outputs.all_changed_files }}"
        mkdir -p changed-files/templates
        cp helm-charts/main-chart/values.yaml changed-files
        cp helm-charts/main-chart/values-prod.yaml changed-files
        echo -e "apiVersion: v2\n\nname: golden-devops-chart\n\nversion: 0.1.0" > changed-files/Chart.yaml
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          mv $file changed-files/templates/
        done

    - name: Clear content of helm-charts/main-chart/templates to contain only changed files
      run: |
        find helm-charts/main-chart/templates -type f -delete

    - name: Template Helm chart's files
      run: |
        cd changed-files
        helm dependency update
        helm template . -f values.yaml -f values-prod.yaml --output-dir rendered-changed-files
        ls -l rendered-changed-files/golden-devops-chart/templates
        for file in $(ls rendered-changed-files/golden-devops-chart/templates); do
          cat "rendered-changed-files/golden-devops-chart/templates/$file"
          cp "rendered-changed-files/golden-devops-chart/templates/$file" ../helm-charts/main-chart/templates
        done

    - name: Scan file(s) from PR
      if: github.event_name == 'pull_request'
      #continue-on-error: true  # TODO OOOOOOOOO temporary
      uses: kubescape/github-action@main
      with:
        files: ${{ steps.changed-files.outputs.all_changed_files }}  # TODO OOOOOOOOO temporary
        #files: "changed-files/rendered-changed-files/golden-devops-chart"  # TODO OOOOOOOOO temporary
        fixFiles: true  # TODO OOOOOOOOO temporary
        format: "sarif"

    - name: Scan file(s) from PR
      if: always()  # TODO OOOOOOOOO temporary
      #continue-on-error: true  # TODO OOOOOOOOO temporary
      uses: kubescape/github-action@v2.3.8
      with:
        files: ${{ steps.changed-files.outputs.all_changed_files }}  # TODO OOOOOOOOO temporary
        #files: "changed-files/rendered-changed-files/golden-devops-chart"  # TODO OOOOOOOOO temporary
        fixFiles: true  # TODO OOOOOOOOO temporary
        format: "sarif"

    - name: Scan file(s) from PR
      if: always()  # TODO OOOOOOOOO temporary
      #continue-on-error: true  # TODO OOOOOOOOO temporary
      uses: kubescape/github-action@v2.3.6
      with:
        files: ${{ steps.changed-files.outputs.all_changed_files }}  # TODO OOOOOOOOO temporary
        #files: "changed-files/rendered-changed-files/golden-devops-chart"  # TODO OOOOOOOOO temporary
        fixFiles: true  # TODO OOOOOOOOO temporary
        format: "sarif"

    - name: Scan file(s) from PR
      if: always()  # TODO OOOOOOOOO temporary
      #continue-on-error: true  # TODO OOOOOOOOO temporary
      uses: kubescape/github-action@v0.0.1
      with:
        files: ${{ steps.changed-files.outputs.all_changed_files }}  # TODO OOOOOOOOO temporary
        #files: "changed-files/rendered-changed-files/golden-devops-chart"  # TODO OOOOOOOOO temporary
        fixFiles: true  # TODO OOOOOOOOO temporary
        format: "sarif"

    - name: Scan file(s) from PR
      if: always()  # TODO OOOOOOOOO temporary
      #continue-on-error: true  # TODO OOOOOOOOO temporary
      uses: kubescape/github-action@v0.0.0
      with:
        files: ${{ steps.changed-files.outputs.all_changed_files }}  # TODO OOOOOOOOO temporary
        #files: "changed-files/rendered-changed-files/golden-devops-chart"  # TODO OOOOOOOOO temporary
        fixFiles: true  # TODO OOOOOOOOO temporary
        format: "sarif"

    - name: PR Suggester according to SARIF file
      if: github.event_name == 'pull_request'
      uses: HollowMan6/sarif4reviewdog@v1.0.0
      with:
        file: 'results.sarif'
        level: warning

    # Gain an additional overview of the vulnerabilities
    - name: Run Kubeconform to check the Helm chart for vulnerabilities (non-blocking)
      if: always()  # TODO OOOOOOOOO temporary
      uses: kubescape/github-action@main
      continue-on-error: true
      with:
        files: "rendered-main-chart"

    - name: Run Kubeconform for all CVEs (blocking)
      if: always()  # TODO OOOOOOOOO temporary
      uses: kubescape/github-action@main
      with:
        files: "rendered-main-chart"
        severityThreshold: critical

  scan-Trivy:
    if: github.event_name != 'push'
    name: Scan Helm Chart With Trivy
    runs-on: ubuntu-latest

    permissions:
      contents: read          # Obtain permission needed for actions/checkout to fetch code
      security-events: write  # Obtain permission needed for github/codeql-action/upload-sarif to upload SARIF results

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      # Gain an additional overview of the vulnerabilities
      - name: Run Trivy for all CVEs (non-blocking)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          hide-progress: false
          scan-ref: 'helm-charts/main-chart'
          exit-code: 0
          format: table

      - name: Run Trivy for all CVEs (blocking)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          hide-progress: false
          scan-ref: 'helm-charts/main-chart'
          exit-code: 1
          severity: 'CRITICAL'
          format: table

  test-Snyk:
    if: github.event_name != 'push'
    name: Scan Helm Chart With Snyk
    runs-on: ubuntu-latest

    permissions:
      contents: read          # Obtain permission needed for actions/checkout to fetch code
      security-events: write  # Obtain permission needed for github/codeql-action/upload-sarif to upload SARIF results

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Template Helm chart's files
        run: |
          cd helm-charts/main-chart
          helm dependency update
          helm template . -f values.yaml -f values-prod.yaml --output-dir rendered-main-chart

      # Gain an additional overview of the vulnerabilities
      - name: Run Snyk to check the Helm chart for vulnerabilities (non-blocking)
        continue-on-error: true
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          file: helm-charts/main-chart/rendered-main-chart

      - name: Run Snyk to check the Helm chart for vulnerabilities (blocking)
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          file: helm-charts/main-chart/rendered-main-chart
          args: --severity-threshold=critical

  scan-results-Trivy:
    if: github.event_name != 'pull_request'
    name: Scan Image With Trivy And Upload Results
    runs-on: ubuntu-latest

    permissions:
      contents: read          # Obtain permission needed for actions/checkout to fetch code
      security-events: write  # Obtain permission needed for github/codeql-action/upload-sarif to upload SARIF results

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      # Gain an additional overview of the vulnerabilities
      - name: Run Trivy for all CVEs (non-blocking)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          hide-progress: false
          scan-ref: 'helm-charts/main-chart'
          exit-code: 0
          format: table

      - name: Run Trivy for HIGH CVEs and report
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          hide-progress: false
          scan-ref: 'helm-charts/main-chart'
          exit-code: 0
          ignore-unfixed: true
          severity: 'HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  scan-results-Snyk:
    if: github.event_name != 'pull_request'
    name: Scan Helm Chart With Snyk And Upload Results
    runs-on: ubuntu-latest

    permissions:
      contents: read          # Obtain permission needed for actions/checkout to fetch code
      security-events: write  # Obtain permission needed for github/codeql-action/upload-sarif to upload SARIF results

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Template Helm chart's files
        run: |
          cd helm-charts/main-chart
          helm dependency update
          helm template . -f values.yaml -f values-prod.yaml --output-dir rendered-main-chart

      # Gain an additional overview of the vulnerabilities
      - name: Run Snyk to check the Helm chart for vulnerabilities (non-blocking)
        continue-on-error: true
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          file: helm-charts/main-chart/rendered-main-chart
          args: --report

      - name: Run Snyk for HIGH CVEs and report
        if: github.event_name != 'push'
        continue-on-error: true
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          file: helm-charts/main-chart/rendered-main-chart
          args: --severity-threshold=high --sarif-file-output=snyk.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'snyk.sarif'

  scan-results-Kubeconform:
    if: github.event_name != 'pull_request'
    name: Scan Helm Chart With Kubeconform And Upload Results
    runs-on: ubuntu-latest

    permissions:
      contents: read          # Obtain permission needed for actions/checkout to fetch code
      security-events: write  # Obtain permission needed for github/codeql-action/upload-sarif to upload SARIF results

    steps:
    - name: Checkout git repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Helm
      uses: azure/setup-helm@v3

    - name: Template Helm chart's files
      run: |
        cd helm-charts/main-chart
        helm dependency update
        helm template . -f values.yaml -f values-prod.yaml --output-dir ../../rendered-main-chart

    # Gain an additional overview of the vulnerabilities
    - name: Run Kubeconform to check the Helm chart for vulnerabilities (non-blocking)
      continue-on-error: true
      uses: kubescape/github-action@main
      with:
        files: "rendered-main-chart"

    - name: Run Kubeconform for HIGH CVEs and report
      continue-on-error: true
      uses: kubescape/github-action@main
      with:
        format: sarif
        outputFile: results
        files: "rendered-main-chart"
        severityThreshold: high

    - name: Upload Kubescape scan results to Github Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif
