---
# Complete workflow responsible for the CI in the Terraform CI/CD pipeline
# TODO think about using flag "-no-color" in this and terraform-cd.yml workflow so in PR comment won't be any strange characters"

name: Terraform CI

concurrency: terraform-integration

on:
  workflow_dispatch:
  pull_request:
    # Most frequent branches that will be trying merge into main include: 'dev_*', 'snyk-upgrade-*', 'dependabot/*'
    branches: ["main"]
    paths:
      - "terraform-infrastructure/**"

env:
  TF_LOG: INFO
  AWS_REGION: us-east-1

jobs:
  syntax-format-tests:
    if: 1==2 # TODO temporarly disable workflow for testing purposes
    name: Formating And Syntax Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform-infrastructure

    permissions:
      contents: read # This is required for actions/checkout
      id-token: write # This is required for aws oidc connection

    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Configure AWS credentials from the AWS account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::152691795422:role/gh-action-role"
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Terraform format check
        id: fmt
        run: |
          pwd
          terraform fmt -check -recursive

      - name: Terraform Init
        id: init
        run: |
          cd vpc
          terraform init
          terraform workspace new dev || terraform workspace select dev
          cd ../eks
          terraform init
          terraform workspace new dev || terraform workspace select dev
          cd ../argocd
          terraform init
          terraform workspace new dev || terraform workspace select dev

      - name: Terraform Validate
        id: validate
        run: |
          pwd && cd vpc && terraform validate
          pwd && cd ../eks && terraform validate
          pwd && cd ../argocd && terraform validate

  test-Trivy:
    if: 1==2 # TODO temporarly disable workflow for testing purposes
    name: Scan Terraform Files With Trivy
    runs-on: ubuntu-latest

    permissions:
      contents: read # Obtain permission needed for actions/checkout to fetch code

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v4

      # Gain an additional overview of the vulnerabilities
      - name: Run Trivy for all CVEs (non-blocking)
        id: test-trivy # TODO HERE AND IN TRIVY AND STEP THAT COMMENT PR USE "overview-test"
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "config"
          hide-progress: false
          scan-ref: "terraform-infrastructure"
          exit-code: 0
          format: table

      - name: Run Trivy for all CVEs (blocking)
        id: trivy-test
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "config"
          hide-progress: false
          scan-ref: "terraform-infrastructure"
          skip-files: "argocd/manifests/install.yaml"
          exit-code: 1
          severity: "CRITICAL"
          format: table
          trivyignores: ".trivyignore"

  test-Snyk:
    if: 1==2 # TODO temporarly disable workflow for testing purposes
    name: Scan Terraform Files With Snyk
    runs-on: ubuntu-latest

    permissions:
      contents: read # Obtain permission needed for actions/checkout to fetch code

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v4

      # Gain an additional overview of the vulnerabilities
      - name: Run Snyk to check the Terraform Files for vulnerabilities (non-blocking)
        id: test-snyk
        continue-on-error: true
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          file: terraform-infrastructure

      - name: Run Snyk to check the Terraform Files for vulnerabilities (blocking)
        id: snyk-test
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          file: terraform-infrastructure
          args: --severity-threshold=critical

  comment-pr:
    if: 1==2 # TODO temporarly disable workflow for testing purposes
    #if: always() # TODO temporarly disable workflow for testing purposes
    #if: github.event_name == 'pull_request' # TODO temporarly disable workflow for testing purposes
    needs: [syntax-format-tests, test-Trivy, test-Snyk]
    name: Comment the PR about the results of the tests
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write # This is required for the GitHub bot to comment on PR

    steps:
      - name: Comment PR about results of the tests
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `## Syntax and format test ðŸ–Œ\`${{ needs.syntax-format-tests.outcome }}\`

            <details><summary>Format output</summary>

            \`\`\`\n
            ${{ needs.syntax-format-tests.steps.fmt.outputs.stdout }}
            \`\`\`

            </details>

            <details><summary>Syntax output</summary>

            \`\`\`\n
            ${{ needs.syntax-format-tests.steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            ## Trivy test ðŸ›¡\`${{ needs.test-Trivy.result }}\`

            <details><summary>Trivy output</summary>

            \`\`\`\n
            ${{ needs.test-Trivy.steps.test-trivy.outputs.stdout }}
            \`\`\`

            </details>

            ## Snyk test ðŸ›¡\`${{ needs.test-Snyk.result }}\`

            <details><summary>Snyk output</summary>

            \`\`\`\n
            ${{ needs.test-Snyk.steps.test-snyk.outputs.stdout }}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  deploy-development:
    if: 1==2 # TODO temporarly disable workflow for testing purposes
    #needs: [syntax-format-tests, test-Trivy, test-Snyk] # TODO temporarly disable workflow for testing purposes
    name: Deploy To Development
    uses: ./.github/workflows/reusable-terraform.yml
    with:
      environment: dev
      gh-environment-name: Development
      gh-environment-url: https://dev.goldendevops.com/
      aws-region: us-east-1

    permissions:
      id-token: write # This is required for aws OIDC connection
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for the GitHub bot to comment on PR
