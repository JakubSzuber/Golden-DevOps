---
# Complete workflow responsible for the changes of the Terraform configuration files in our Terraform CI/CD pipeline
# TODO OOOOOo: Resolve all TODO from this workflow

name: Terraform

concurrency: terraform

# TODO Those event triggers are temporarily turned off
on:  # TODO Change the trigger events' logic (or leave if you are sure it's ok (but it's probably not)). Maybe do that branch have to start with "dev_" or branch main but only for /src
  workflow_dispatch:
#  push:
#    branches: [main]
#    paths:
#      - 'terraform-infrastructure/**'
#  pull_request:
#    branches: [main]
#    paths:
#      - 'terraform-infrastructure/**'

permissions:
  id-token: write       # This is required for aws OIDC connection
  contents: read        # This is required for actions/checkout
  pull-requests: write  # This is required for the GitHub bot to comment on PR

env:
  TF_LOG: INFO
  #AWS_REGION: ${{ secrets.AWS_REGION }}  # TODO?
  AWS_REGION: us-east-1

jobs:
  test:
    # if: github.event_name == 'pull_request'  # TODO TEMPORARY TURNED OFF FOR TESTING PURPOSES
    name: Formating and syntax tests
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform-infrastructure
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Terraform fmt  # TODO if there is an error then probably you just have to enter the right dir
        id: fmt
        run: pwd && terraform fmt -check
        continue-on-error: true

      - name: Terraform Validate  # TODO if there is an error then probably you just have to enter the right dir
        id: validate
        run: pwd && terraform validate -no-color

  deploy-development:
    needs: [test]
    #if: github.event_name == 'pull_request'  # TODO TEMPORARY TURNED OFF FOR TESTING PURPOSES
    name: Deploy to Development
    runs-on: ubuntu-latest
    environment: 
      name: Development
      url: https://dev.goldendevops.com/
    defaults:
      run:
        shell: bash
        working-directory: terraform-infrastructure
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from the AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          #role-to-assume: ${{ secrets.AWS_ROLE }} TODO ?? "arn:aws:iam::152691795422:role/gh-action-role"
          role-to-assume: "arn:aws:iam::152691795422:role/gh-action-role"
          #aws-region: ${{ secrets.AWS_REGION }} TODO ??
          aws-region: us-east-1
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Terraform Init  # TODO Meybe use reusable workflow or sth like that
        id: init
        run: |
          cd vpc
          terraform init
          terraform workspace new dev || terraform workspace select dev
        # TODO temporarily turned off
          #cd ../eks
          #terraform workspace new dev || terraform workspace select dev
          #terraform init
          #cd ../argocd
          #terraform workspace new dev || terraform workspace select dev
          #terraform init

      # TODO OOOTemporaray turned off
      #- name: Terraform Plan
      #  id: plan
      #  run: terraform plan -no-color
      #  continue-on-error: true

# TODO TEMPORARLY TURNED OFF FOR TESTING PURPOSES
#      - uses: actions/github-script@v6
#        env:
#          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#            <details><summary>Validation Output</summary>
#
#            \`\`\`\n
#            ${{ steps.validate.outputs.stdout }}
#            \`\`\`
#
#            </details>
#
#            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#
#            <details><summary>Show Plan</summary>
#
#            \`\`\`\n
#            ${process.env.PLAN}
#            \`\`\`
#
#            </details>
#
#            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
#
#            github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: output
#            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        #if: github.ref == 'refs/heads/main'  # TODO TEMPORARLY TURNED OFF FOR TESTING PURPOSES
        #run: terraform apply -auto-approve -input=false  # TODO OOOOOOOOOO CHANGE THAT
        run: |
          pwd
          cd vpc
          terraform workspace list
          terraform workspace select dev
          terraform apply -var-file terraform-dev.tfvars -auto-approve -input=false
        # TODO temporarily turned off
          #cd ../eks
          #terraform workspace select dev
          #terraform apply -var-file terraform-dev.tfvars -auto-approve -input=false
          #cd ../argocd
          #terraform workspace select dev
          #terraform apply -var-file terraform-dev.tfvars -auto-approve -input=false

#  deploy-staging:
#    needs: [deploy-development]
#    #the same
#    environment: 
#      name: Staging
#      url: https://staging.goldendevops.com/
#    #the same
#
#  deploy-production:
#    needs: [deploy-staging]
#    #the same
#    environment: 
#      name: Production
#      url: https://goldendevops.com/
#    #the same
