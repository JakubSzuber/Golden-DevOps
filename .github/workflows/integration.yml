---
# Complete workflow responsible for the integration in our CI/CD pipeline

name: CI

concurrency: integration

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'Dockerfile'
      - 'src/**'
      - '!src/**/README.md'
      - 'public/**'
      - '!public/**/README.md'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: ['main', 'dev_*', 'snyk-upgrade-*']
    paths:
      - 'Dockerfile'
      - 'src/**'
      - '!src/**/README.md'
      - 'public/**'
      - '!public/**/README.md'
      - 'package.json'
      - 'package-lock.json'

env:
  AWS_REGION: us-east-1

jobs:
  lint:
    name: Lint Repo
    if: github.event_name != 'push'
    runs-on: ubuntu-22.04

    permissions:
      contents: read  # Obtain permission needed to see the code

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'

      - run: npm ci

      - name: Run Super-Linter
        uses: super-linter/super-linter/slim@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false  # TODO This line should be set only if the repository is first properly linted before first usage of this line
          #FILTER_REGEX_INCLUDE: .*src/.*  # Uncomment to inlude only files within /src
          #FILTER_REGEX_EXCLUDE: .*/.github/workflows/.*  # Uncomment to exclude workflow files

  build-unit-test-image:
    name: Build Unit Test Image
    if: github.event_name != 'push'
    runs-on: ubuntu-22.04

    permissions:
      packages: write  # Obtain permission needed to push docker image to ghcr.io

    steps:    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to ghcr.io registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Use GHCR as a register for test images
    - name: Build and Push to GHCR
      uses: docker/build-push-action@v4
      with:
        target: unit-test
        push: true
        tags: ghcr.io/jakubszuber/react-nginx-image-unit-test:${{ github.run_id }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  build-test-image:
    name: Build Test Image (Candidate)
    if: github.event_name != 'push'
    runs-on: ubuntu-22.04

    permissions:
      packages: write       # Obtain permission needed to push docker image to ghcr.io
      pull-requests: write  # Obtain permission needed to comment on PR

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Login to ghcr.io registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker meta for the candidate image  # Add multiple tags to the image
      id: docker_meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/jakubszuber/react-nginx-image
        flavor: |
          latest=true
        tags: |
          type=semver,pattern={{version}},value=v1.0.0
          type=semver,pattern={{major}}.{{minor}},value=v1.0.0
          type=ref,event=pr
          type=sha,format=long
          type=raw,value=${{ github.run_id }}
          type=raw,value=stable-{{date 'YYYYMMDD'}}-{{sha}}

    # Use GHCR as a register for test images
    - name: Build and Push to GHCR
      uses: docker/build-push-action@v4
      with:
        push: true
        tags: ${{ steps.docker_meta.outputs.tags }}
        labels: ${{ steps.docker_meta.outputs.labels }}
        cache-from: type=gha  # Use cached image layers to reduce image building time
        cache-to: type=gha,mode=max
        platforms: linux/amd64  # You can change to "linux/amd64,linux/arm/v7,linux/arm64"

    - name: Comment to PR that the candidate image pushed to GHCR and with which tags
      if: github.event_name == 'pull_request'
      uses: thollander/actions-comment-pull-request@v2
      with:
        message: |
          Candidate image was pushed to GHCR
          Tags added to images (final image will have similar tags):
          ```text
          ${{ steps.docker_meta.outputs.tags }}
          ```
          Labels added to images (final image will have similar tags):
          ```text
          ${{ steps.docker_meta.outputs.labels }}
          ```
        reactions: eyes, rocket

    - name: TESTT
      if: github.event_name == 'pull_request'
      uses: peter-evans/create-or-update-comment@v3
      with:
        body: |
          Candidate image was pushed to GHCR
          Tags added to images (final image will have similar tags):
          ```text
          ${{ steps.docker_meta.outputs.tags }}
          ```
          Labels added to images (final image will have similar tags):
          ```text
          ${{ steps.docker_meta.outputs.labels }}
          ```

          This is a multi-line test comment
          - With GitHub **Markdown** :sparkles:
          - Created by [create-or-update-comment][1]

          [1]: https://github.com/peter-evans/create-or-update-comment
        reactions: '+1'

  test-unit:
    if: github.event_name != 'push'
    name: Unit Tests In Docker
    needs: [build-unit-test-image]
    runs-on: ubuntu-latest

    permissions:
      packages: read  # Obtain permission needed to pull docker image to ghcr.io

    steps:
      - name: Login to ghcr.io registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Unit Testing in Docker
        run: |
          docker run --rm ghcr.io/jakubszuber/react-nginx-image-unit-test:"$GITHUB_RUN_ID" sh -c "cd /test-app && npm test"

# You can also do Integration Testing with usage of Docker Compose if you would like to use multiple different containers for the application logic
#  test-integration:
#    if: github.event_name != 'push'
#    name: Integration Tests In Compose
#    needs: [build-test-image]
#    runs-on: ubuntu-latest
#
#    permissions:
#      packages: read  # Obtain permission needed to pull docker image to ghcr.io
#
#    steps:
#      - name: Checkout git repo
#        uses: actions/checkout@v3
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#      
#      - name: Login to ghcr.io registry
#        uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Test healthcheck in Docker Compose
#        run: |
#          export TESTING_IMAGE=ghcr.io/jakubszuber/react-nginx-image:"$GITHUB_RUN_ID"
#          echo Testing image: "$TESTING_IMAGE"
#          docker compose -f docker-compose.test.yml up --exit-code-from main-end-service

  test-k3d:
    if: github.event_name != 'push'
    name: Test Deployment In Kubernetes
    needs: [build-test-image]
    runs-on: ubuntu-latest

    permissions:
      packages: read  # Obtain permission needed to pull docker image to ghcr.io

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Login to ghcr.io registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Run micro Kubernetes cluster for testing purposes
      - uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "test-cluster-1"
          args: >-
            --agents 1
            --no-lb
            --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"

      - name: Smoke test deployment in k3d Kubernetes  # We use here the testing image from GitHub registry
        run: |
          kubectl create secret docker-registry regcred \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }}
          echo ${{ secrets.GITHUB_TOKEN }} | helm registry login ghcr.io -u $ --password-stdin
          helm install golden-devops-helm-release helm-charts/main-chart --values helm-charts/main-chart/values.yaml --set image.name=ghcr.io/jakubszuber/react-nginx-image,image.tag=$GITHUB_RUN_ID,namespace=argocd,disableTLS=false
          sleep 25
          echo "Spinning containers in progress, please wait..."
          sleep 25
          kubectl describe deployment golden-devops-helm-release --namespace=argocd
          kubectl logs -l app=golden-devops-helm-release --namespace=argocd
          kubectl get all --all-namespaces
          echo "------- Eventual Troubleshooting --------"
          sudo apt-get install jq
          POD1=$(kubectl get pods -o json --namespace=argocd | jq -r '.items[0].metadata.name')
          POD2=$(kubectl get pods -o json --namespace=argocd | jq -r '.items[1].metadata.name')
          echo "First pod: $POD1"
          echo "Second pod: $POD2"
          kubectl logs --namespace=argocd $POD1
          kubectl logs --namespace=argocd $POD2
          kubectl rollout status deployment golden-devops-helm-release --namespace=argocd
          echo "Finished setting up"

      - name: Test deployment
        run: |
          sleep 3
          kubectl exec deploy/golden-devops-helm-release --namespace=argocd -- curl -k --fail https://localhost:8080
          helm test golden-devops-helm-release
          if [ $? -ne 0 ]; then 
            echo "Testing of Helm golden-devops-helm-release failed!"
            kubectl logs golden-devops-helm-release-connection-test --namespace=argocd
            exit 1
          fi

  scan-image-Trivy:
    if: github.event_name != 'push'
    name: Scan Image With Trivy
    needs: [build-test-image]
    runs-on: ubuntu-latest

    permissions:
      contents: read          # Obtain permission needed for actions/checkout to fetch code
      packages: read          # Obtain permission needed to push docker image to ghcr.io
      security-events: write  # Obtain permission needed for github/codeql-action/upload-sarif to upload SARIF results

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to ghcr.io registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image to scan
        run: docker pull ghcr.io/jakubszuber/react-nginx-image:"$GITHUB_RUN_ID"

      # Gain an additional overview of the vulnerabilities
      - name: Run Trivy for all CVEs (non-blocking)
        uses: aquasecurity/trivy-action@master
        with:
          hide-progress: false
          image-ref: ghcr.io/jakubszuber/react-nginx-image:${{ github.run_id }}
          exit-code: 0
          format: table

      - name: Run Trivy for all CVEs (blocking)
        uses: aquasecurity/trivy-action@master
        with:
          hide-progress: false
          image-ref: ghcr.io/jakubszuber/react-nginx-image:${{ github.run_id }}
          exit-code: 1
          severity: 'CRITICAL'
          format: table

  scan-code-Snyk:
    if: github.event_name != 'push'
    name: Scan Code With Snyk
    runs-on: ubuntu-latest

    permissions:
      security-events: write

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      # Gain an additional overview of the vulnerabilities
      - name: Run Snyk to check the code for vulnerabilities (non-blocking)
        continue-on-error: true
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk to check the code for vulnerabilities (blocking)
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=critical

  scan-image-Snyk:
    if: github.event_name != 'push'
    name: Scan Image With Snyk
    needs: [build-test-image]
    runs-on: ubuntu-latest

    permissions:
      security-events: write

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Login to ghcr.io registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image to scan
        run: docker pull ghcr.io/jakubszuber/react-nginx-image:"$GITHUB_RUN_ID"

      # Gain an additional overview of the vulnerabilities
      - name: Run Snyk to check Docker image for vulnerabilities (non-blocking)
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ghcr.io/jakubszuber/react-nginx-image:${{ github.run_id }}
          args: --file=Dockerfile

      - name: Run Snyk to check Docker image for vulnerabilities (blocking)
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ghcr.io/jakubszuber/react-nginx-image:${{ github.run_id }}
          args: --file=Dockerfile --severity-threshold=critical

  build-final-image:
    if: github.event_name != 'pull_request'
    name: Build Final Image
    # TODO Maybe later add "scan-artifact-AWS-CodeGuru"
    # Add "test-integration" to the below list if you want to use integration testing
    needs: [lint, test-unit, test-k3d, scan-image-Trivy, scan-code-Snyk, scan-image-Snyk]
    runs-on: ubuntu-latest

    permissions:
      packages: write       # Obtain permission needed to push docker image to ghcr.io
      pull-requests: write  # Obtain permission needed to create and update comments in PRs

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to ghcr.io registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta for the final image  # Add multiple tags to the image
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/jakubszuber/react-nginx-image,jakubszuber/react-nginx-image
          flavor: |
            latest=true
          tags: |
            type=semver,pattern={{version}},value=v1.0.0
            type=semver,pattern={{major}}.{{minor}},value=v1.0.0
            type=ref,event=pr
            type=sha,format=long
            type=raw,value=stable-{{date 'YYYYMMDD'}}-{{sha}},enable={{is_default_branch}}

      - name: Build Docker image and push it to GHCR and Docker Hub if the event is a direct push, merged pull request, or manual run
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=gha  # Use cached image layers to reduce image building time
          cache-to: type=gha,mode=max
          platforms: linux/amd64  # You can change to "linux/amd64,linux/arm/v7,linux/arm64"

  generate-sbom:
    if: github.event_name != 'pull_request'
    name: Generate SBOM (Software Bill of Materials) For The Final Image
    needs: [build-final-image]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run Trivy in GitHub SBOM mode and submit results to Dependency Graph
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'github'
          output: 'dependency-results.sbom.json'
          image-ref: 'jakubszuber/react-nginx-image:${{ github.sha }}'
          github-pat: ${{ secrets.GITHUB_TOKEN }}

  image-scan-results-Trivy:
    if: github.event_name != 'pull_request'
    name: Scan Image With Trivy And Upload Results
    needs: [build-final-image]
    runs-on: ubuntu-latest

    permissions:
      contents: read          # Obtain permission needed for actions/checkout to fetch code
      packages: read          # Obtain permission needed to push docker image to ghcr.io
      security-events: write  # Obtain permission needed for github/codeql-action/upload-sarif to upload SARIF results

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull image to scan
        run: docker pull jakubszuber/react-nginx-image:sha-"$GITHUB_SHA"

      # Gain an additional overview of the vulnerabilities
      - name: Run Trivy for all CVEs (non-blocking)
        uses: aquasecurity/trivy-action@master
        with:
          hide-progress: false
          image-ref: jakubszuber/react-nginx-image:sha-${{ github.sha }}
          exit-code: 0
          format: table

      - name: Run Trivy for HIGH CVEs and report
        uses: aquasecurity/trivy-action@master
        with:
          hide-progress: false
          image-ref: jakubszuber/react-nginx-image:sha-${{ github.sha }}
          exit-code: 0
          ignore-unfixed: true
          severity: 'HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  code-scan-results-Snyk:
    if: github.event_name != 'pull_request'
    name: Scan Code With Snyk And Upload Results
    runs-on: ubuntu-latest

    permissions:
      security-events: write

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      # Gain an additional overview of the vulnerabilities
      - name: Run Snyk to check the code for vulnerabilities (non-blocking)
        continue-on-error: true
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          args: --report

      - name: Run Snyk for HIGH CVEs and report
        continue-on-error: true
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output=snyk-code.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'snyk-code.sarif'

  image-scan-results-Snyk:
    if: github.event_name != 'pull_request'
    name: Scan Image With Snyk And Upload Results
    needs: [build-final-image]
    runs-on: ubuntu-latest

    permissions:
      security-events: write

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull image to scan
        run: docker pull jakubszuber/react-nginx-image:sha-"$GITHUB_SHA"

      # Gain an additional overview of the vulnerabilities
      - name: Run Snyk to check Docker image for vulnerabilities (non-blocking)
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: jakubszuber/react-nginx-image:sha-${{ github.sha }}
          args: --file=Dockerfile --report

      - name: Run Snyk for HIGH CVEs and report
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: jakubszuber/react-nginx-image:sha-${{ github.sha }}
          args: --file=Dockerfile --severity-threshold=high --sarif-file-output=snyk.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'snyk.sarif'

  notify-slack:
    # Setup guide https://github.com/marketplace/actions/slack-send#technique-3-slack-incoming-webhook
    name: Notify Slack
    needs: [build-final-image]
    if: always()
    runs-on: ubuntu-latest
    env: 
      STAT: ${{ needs.build-final-image.result }}

    permissions:
      contents: read
      actions: read

    steps:
      - name: TEST1
        run: |
          if [[ "$STAT" == "skipped" ]]; then
            echo "STAT=failure" >> "$GITHUB_ENV"
          fi
      - name: TEST
        run: |
          echo "$STAT"
          echo ${{ env.STAT }}
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ env.STAT }}
          fields: repo,message,author,commit,action,eventName,ref,workflow,job,took,pullRequest
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always() # Pick up events even if the job fails or is canceled.
