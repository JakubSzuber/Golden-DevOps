---
# Complete workflow responsible for the CD in our CI/CD pipeline

name: CD

concurrency: delivery

on:
  workflow_dispatch:
  push:  # Trigger automatically on merged pull request or direct push
    branches: [main]
    paths:
      - 'Dockerfile'
      - 'src/**'
      - '!src/**/README.md'
      - 'public/**'
      - '!public/**/README.md'
      - 'package.json'
      - 'package-lock.json'

env:
  # The variable "IMAGE_TAG" by default contains only showcase value but later it will
  # contain the main tag of the image that is a reference for other actions, manifests, etc.
  # It is fusion of "stable" + "date of build" + "short sha"
  IMAGE_TAG: stable-20230101-aaaa111s
  AWS_REGION: us-east-1
  # TODO Do sth with below env variables
  #ECS_SERVICE: my-service
  #ECS_CLUSTER: initial-cluster
  #ECS_TASK_DEFINITION: .aws/ecs-task-definition.json
  #CONTAINER_NAME: some-nginx

jobs:
  build-final-image:
    name: Build Final Image
    runs-on: ubuntu-latest

    permissions:
      packages: write       # Obtain permission needed to push docker image to ghcr.io
      pull-requests: write  # Obtain permission needed to create and update comments in PRs

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to ghcr.io registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # TODO fix the "type=ref,event=pr" tag
      - name: Docker meta for the final image  # Add multiple tags to the image
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/jakubszuber/react-nginx-image,jakubszuber/react-nginx-image
          flavor: |
            latest=true
          tags: |
            type=semver,pattern={{version}},value=v1.0.0
            type=semver,pattern={{major}}.{{minor}},value=v1.0.0
            type=ref,event=pr
            type=sha,format=long
            type=raw,value=stable-{{date 'YYYYMMDD'}}-{{sha}},enable={{is_default_branch}},priority=1100

      - name: Save the main image's tag to IMAGE_TAG
        run: |
          TAGS="${{ steps.docker_meta.outputs.tags }}"
          echo "$TAGS"
          echo "------------------------------"
          EXTRACTED=$(echo "$TAGS" | grep -E "ghcr.io/.*/react-nginx-image:stable-" | awk -F 'react-nginx-image:' '{print $2}')
          echo $EXTRACTED
          echo "::set-output name=IMAGE_TAG::$EXTRACTED"

      - name: Build Docker image and push it to GHCR and Docker Hub if the event is a direct push, merged pull request, or manual run
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=gha  # Use cached image layers to reduce image building time
          cache-to: type=gha,mode=max
          platforms: linux/amd64  # You can change to "linux/amd64,linux/arm/v7,linux/arm64"

  generate-sbom:
    name: Generate SBOM (Software Bill of Materials) For The Final Image
    needs: [build-final-image]
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run Trivy in GitHub SBOM mode and submit results to Dependency Graph
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'github'
          output: 'dependency-results.sbom.json'
          image-ref: 'jakubszuber/react-nginx-image:${{ env.IMAGE_TAG }}'
          github-pat: ${{ secrets.GITHUB_TOKEN }}

  image-scan-results-Trivy:
    name: Scan Image With Trivy And Upload Results
    needs: [build-final-image]
    runs-on: ubuntu-latest

    permissions:
      contents: read          # Obtain permission needed for actions/checkout to fetch code
      packages: read          # Obtain permission needed to push docker image to ghcr.io
      security-events: write  # Obtain permission needed for github/codeql-action/upload-sarif to upload SARIF results

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull image to scan
        run: docker pull jakubszuber/react-nginx-image:"$IMAGE_TAG"

      # Gain an additional overview of the vulnerabilities
      - name: Run Trivy for all CVEs (non-blocking)
        uses: aquasecurity/trivy-action@master
        with:
          hide-progress: false
          image-ref: jakubszuber/react-nginx-image:$IMAGE_TAG
          exit-code: 0
          format: table

      - name: Run Trivy for HIGH CVEs and report
        uses: aquasecurity/trivy-action@master
        with:
          hide-progress: false
          image-ref: jakubszuber/react-nginx-image:$IMAGE_TAG
          exit-code: 0
          ignore-unfixed: true
          severity: 'HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'
          limit-severities-for-sarif: 'true'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  code-scan-results-Snyk:
    name: Scan Code With Snyk And Upload Results
    runs-on: ubuntu-latest

    permissions:
      security-events: write

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      # Gain an additional overview of the vulnerabilities
      - name: Run Snyk to check the code for vulnerabilities (non-blocking)
        continue-on-error: true
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          args: --report

      - name: Run Snyk for HIGH CVEs and report
        continue-on-error: true
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output=snyk-code.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'snyk-code.sarif'

  image-scan-results-Snyk:
    name: Scan Image With Snyk And Upload Results
    needs: [build-final-image]
    runs-on: ubuntu-latest

    permissions:
      security-events: write

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull image to scan
        run: docker pull jakubszuber/react-nginx-image:"$IMAGE_TAG"

      # Gain an additional overview of the vulnerabilities
      - name: Run Snyk to check Docker image for vulnerabilities (non-blocking)
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: jakubszuber/react-nginx-image:$IMAGE_TAG
          args: --file=Dockerfile --report

      - name: Run Snyk for HIGH CVEs and report
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: jakubszuber/react-nginx-image:$IMAGE_TAG
          args: --file=Dockerfile --severity-threshold=high --sarif-file-output=snyk.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'snyk.sarif'

  # TODO use reusable workflow for the change-tag-dev and change-tag-staging jobs
  change-tag-dev:
    needs: [build-final-image]
    runs-on: ubuntu-latest

    permissions:
      contents: write  # This is required for actions/checkout
      id-token: write  # This is required for requesting the JWT

    environment: 
      name: Development
      url: https://dev.goldendevops.com/

    steps:
      - name: Print the used tag
        run: echo "To development environment will deploy a container with image tag  $IMAGE_TAG"

      - name: Print the used tag
        run: echo "Changing the image's tag in the manifest to $IMAGE_TAG"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Replace image tag  # Git commands require granting the permissions for read and write for the workflow
        run: |
          echo "Helm values-dev.yaml file before change:" && cat helm-charts/main-chart/values-dev.yaml
          sed -i "s/stable-.*/${{ env.IMAGE_TAG }}/" helm-charts/main-chart/values-dev.yaml
          echo "Helm values-dev.yaml file after change:" && cat helm-charts/main-chart/values-dev.yaml
          git config user.name github-actions
          git config user.email github-actions@github.com
          git pull
          git add helm-charts/main-chart/values-dev.yaml
          git commit -m "Update the image's tag in the Helm values-dev.yaml file [skip actions]"
          git push

  change-tag-staging:
    needs: [change-tag-dev]
    runs-on: ubuntu-latest

    permissions:
      contents: write    # This is required for actions/checkout
      id-token: write   # This is required for requesting the JWT

    environment: 
      name: Staging
      url: https://staging.goldendevops.com/

    steps:
      - name: Print the used tag
        run: echo "To staging environment will deploy a container with image tag  $IMAGE_TAG"

      - name: Print the used tag
        run: echo "Changing the image's tag in the manifest to $IMAGE_TAG"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Replace image tag  # Git commands require granting the permissions for read and write for the workflow
        run: |
          echo "Helm values-staging.yaml file before change:" && cat helm-charts/main-chart/values-staging.yaml
          sed -i "s/stable-.*/${{ env.IMAGE_TAG }}/" helm-charts/main-chart/values-staging.yaml
          echo "Helm values-staging.yaml file after change:" && cat helm-charts/main-chart/values-staging.yaml
          git config user.name github-actions
          git config user.email github-actions@github.com
          git pull
          git add helm-charts/main-chart/values-staging.yaml
          git commit -m "Update the image's tag in the Helm values-staging.yaml file [skip actions]"
          git push

# TODO do sth with below code
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           role-to-assume: arn:aws:iam::152691795422:role/gh-action-role
#           role-session-name: samplerolesession
#           aws-region: ${{ env.AWS_REGION }}

#  Optionally you can use ECR instead of Docker Hub (then you will have to change a lot in CI and CD workflow)
#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: ${{ env.IMAGE_TAG }}
#         run: |
#           # Build a docker container and
#           # push it to ECR so that it can
#           # be deployed to ECS.
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

#       - name: Fill in the new image ID in the Amazon ECS task definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
#         with:
#           task-definition: ${{ env.ECS_TASK_DEFINITION }}
#           container-name: ${{ env.CONTAINER_NAME }}
#           image: docker.io/jakubszuber/testing_image:$IMAGE_TAG  # Use just created image by the CI workflow

#       - name: Deploy Amazon ECS task definition
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.11
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: ${{ env.ECS_SERVICE }}
#           cluster: ${{ env.ECS_CLUSTER }}
#           wait-for-service-stability: true

  change-tag-production:
    runs-on: ubuntu-latest
    needs: [change-tag-staging]

    permissions:
      contents: write

    environment: 
      name: Production
      url: https://goldendevops.com/

    steps:
      - name: Print the used tag
        run: echo "Changing the image's tag in the manifest to $IMAGE_TAG"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Replace image tag  # Git commands require granting the permissions for read and write for the workflow
        run: |
          echo "Helm values-prod.yaml file before change:" && cat helm-charts/main-chart/values-prod.yaml
          sed -i "s/stable-.*/${{ env.IMAGE_TAG }}/" helm-charts/main-chart/values-prod.yaml
          echo "Helm values-prod.yaml file after change:" && cat helm-charts/main-chart/values-prod.yaml
          git config user.name github-actions
          git config user.email github-actions@github.com
          git pull
          git add helm-charts/main-chart/values-prod.yaml
          git commit -m "Update the image's tag in the Helm values-prod.yaml file [skip actions]"
          git push

  notify-slack:
    # Setup guide https://github.com/marketplace/actions/slack-send#technique-3-slack-incoming-webhook
    name: Notify Slack (Update Of Main Deployment's Container)
    needs: [change-tag-production]
    if: always()
    runs-on: ubuntu-latest
    env: 
      STAT: ${{ needs.change-tag-production.result }}

    permissions:
      contents: read
      actions: read

    steps:
      - name: TEST1
        run: |
          if [[ "$STAT" == "skipped" ]]; then
            echo "STAT=failure" >> "$GITHUB_ENV"
          fi

      - name: TEST
        run: |
          echo "$STAT"
          echo ${{ env.STAT }}

      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ env.STAT }}
          fields: repo,message,author,commit,action,eventName,ref,workflow,job,took,pullRequest
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL2 }}
        if: always() # Pick up events even if the job fails or is canceled.
